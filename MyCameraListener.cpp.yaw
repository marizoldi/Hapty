#include "MyCameraListener.h"
#include <sstream>

MyCameraListener::MyCameraListener(MyApplication* app, Ogre::Camera* cam):  
m_pCamera(cam), mTimeUntilNextToggle(0), cameraTranslation(Ogre::Vector3::ZERO), mCurrentSpeed(0),
	   mMoveSpeed(100), mRotateSpeed(36), mMoveScale(0.0f)
{

		 mHeadDist = 0;                            // last calculated Z position of the users head
		 mHeadX, mHeadY = 0;
		 mHeadPosition= Ogre::Vector3::ZERO;
		 firstPoint = Ogre::Vector2();
		 secondPoint = Ogre::Vector2();
    /*ISpaceNavigator& space_navigator = ISpaceNavigator::Create();
	if(space_navigator.initDevice())
	{
		space_navigator.setTranslationScale(1.0);
		space_navigator.setListener(this);
		printf("SpaceNav initialised");
	}*/
}

MyCameraListener::~MyCameraListener(void)
{
   //ISpaceNavigator::Destroy();
}

bool MyCameraListener::frameStarted( const Ogre::FrameEvent& frame_event )
{
	//mWiiMote.RefreshState();
	mSpeedLimit = mMoveScale * frame_event.timeSinceLastFrame;
	Ogre::Vector3 lastMotion = cameraTranslation;
	

	if (parseWiiMoteData())
	{	
		// one of the input modes is immediate, so setup what is needed for immediate movement
		if (mTimeUntilNextToggle >= 0)
			mTimeUntilNextToggle -= frame_event.timeSinceLastFrame;

		// Move about 100 units per second
		mMoveScale = mMoveSpeed * frame_event.timeSinceLastFrame;
		// Take about 10 seconds for full rotation
		mRotScale = mRotateSpeed * frame_event.timeSinceLastFrame;

		mRotX = 0;
		mRotY = 0;
		cameraTranslation = Ogre::Vector3::ZERO;

		WiiControl();
		
		// ramp up / ramp down speed
		if (cameraTranslation == Ogre::Vector3::ZERO)
		{
			// decay (one third speed)
			mCurrentSpeed -= frame_event.timeSinceLastFrame*0.05;
			cameraTranslation = lastMotion;
		}
		else
			// ramp up
			mCurrentSpeed += frame_event.timeSinceLastFrame;

		// Limit motion speed
		if (mCurrentSpeed > 1.0)
			mCurrentSpeed = 1.0;
		if (mCurrentSpeed < 0.0)
			mCurrentSpeed = 0.0;

		cameraTranslation *= mCurrentSpeed;
		m_pCamera->getParentSceneNode()->translate(cameraTranslation, Ogre::Node::TransformSpace::TS_LOCAL);
		m_pCamera->getParentSceneNode()->pitch(-Ogre::Math::ATan(mWiiMote.Acceleration.Z*0.003), Ogre::Node::TransformSpace::TS_LOCAL);
		m_pCamera->getParentSceneNode()->roll(Ogre::Math::ATan(mWiiMote.Acceleration.X*0.003), Ogre::Node::TransformSpace::TS_LOCAL);

		//Ogre::Vector3 newPosition = Ogre::Vector3(mHeadX, mHeadY, -mHeadDist);
		//Ogre::Vector3 lookAt = m_pCamera->getPosition() + (m_pCamera->getDirection().normalisedCopy() * -mHeadPosition.z);
		//m_pCamera->getParentNode()->translate(newPosition - mHeadPosition, Ogre::Node::TransformSpace::TS_LOCAL);
		m_pCamera->getParentNode()->yaw(calc_yaw(firstPoint, secondPoint));
	

		//mHeadPosition = newPosition;
		
		// m_pCamera->setFOVy(Radian(Degree(107 - 0.1944 * mHeadDist * mScreenHeightInMM/10)));

	}
	
	//ISpaceNavigator::Get().update();
	return true;
}

Ogre::Radian MyCameraListener::calc_yaw(Ogre::Vector2 _firstPoint, Ogre::Vector2 _secondPoint) 
{
	float n;

	float avgX = (_firstPoint.x + _secondPoint.x) / 2.0f;
	n = avgX - 512;
	n *= ((Ogre::Math::PI/4) * 0.39) / 512;
		if (mWiiMote.Button.B())
			n = 0;
    
	return (Ogre::Radian)(atanf(n)*0.08);
}

bool MyCameraListener::frameRenderingQueued( const Ogre::FrameEvent& frame_event )
{
	return true;
}

bool MyCameraListener::frameEnded( const Ogre::FrameEvent& frame_event )
{
	return true;
}

bool MyCameraListener::parseWiiMoteData()
{
	if (!wiiInUse)
		return false;

	if (mWiiMote.ConnectionLost()) 
	{
		MessageBox(NULL, "Connection to WiiMote lost. Continuing without WiiMote Support!", "Lost Connection", MB_OK);
		wiiInUse = false;
		return false;
	}

	if (mWiiMote.RefreshState() == NO_CHANGE)
		return false;

	/////YAW
	int numvisible = 0;
		const float mRadiansPerPixel = (float)(Ogre::Math::PI / 4.0f) / 1024.0f;    // don't change this! it's a fixed value for the WiiMote infrared camera
		float mIRDotDistanceInMM = 8.5f * 25.4f;   // distance of the IR dots in mm. change it, if you are not using the original nintendo sensor bar
		float mScreenHeightInMM = 20.0f * 25.4f;   // height of your screen
		bool mWiiMoteIsAboveScreen = true;         // is the WiiMote mounted above or below the screen?
		float mWiiMoteVerticleAngle = 0;           // vertical angle of your WiiMote (as radian) pointed straight forward for me.
		//float mHeadDist = 0;                            // last calculated Z position of the users head
		//float mHeadX, mHeadY = 0;
		/*Ogre::Vector2 firstPoint = Ogre::Vector2();
		Ogre::Vector2 secondPoint = Ogre::Vector2();*/
		
		for (int index = 0; index < 4; index++) 
		{
			if (mWiiMote.IR.Dot[index].bVisible) 
			{
				if (numvisible == 0) 
				{
					firstPoint.x = mWiiMote.IR.Dot[index].RawX;
					firstPoint.y = mWiiMote.IR.Dot[index].RawY;
					numvisible = 1;
					
				}
				else if (numvisible == 1) 
				{
					secondPoint.x = mWiiMote.IR.Dot[index].RawX;
					secondPoint.y = mWiiMote.IR.Dot[index].RawY;
					numvisible = 2; 
					break;
				}
			}
		}
		if(numvisible = 2)
		{
			float dx = firstPoint.x - secondPoint.x;
			float dy = firstPoint.y - secondPoint.y;
			float pointDist = (float)Ogre::Math::Sqrt(dx * dx + dy * dy);
			float avgX = (firstPoint.x + secondPoint.x) / 2.0f;
			float avgY = (firstPoint.y + secondPoint.y) / 2.0f;

		    float angle = mRadiansPerPixel * pointDist / 2;
			float relativeVerticalAngle = (avgY -384) * mRadiansPerPixel;
			//printf("angle: %f\n",angle);

			mHeadDist = (float)((mIRDotDistanceInMM / 2) / Ogre::Math::Tan(angle)) / mScreenHeightInMM;
			mHeadX = (float)(Ogre::Math::Sin(mRadiansPerPixel * (avgX - 512)) * mHeadDist);

			if (mWiiMoteIsAboveScreen)
				mHeadY = .5f + (float)(Ogre::Math::Sin(relativeVerticalAngle + mWiiMoteVerticleAngle) * mHeadDist);
			else
				mHeadY = -.5f + (float)(Ogre::Math::Sin(relativeVerticalAngle + mWiiMoteVerticleAngle) * mHeadDist); 
			//m_pCamera->yaw(calc_yaw(firstPoint, secondPoint)*5);
			//printf("%f\n",calc_yaw(firstPoint, secondPoint).valueRadians());
			//m_pCamera->setFOVy(Ogre::Radian(Ogre::Degree(107-0.1944*mHeadDist * mScreenHeightInMM/10)));
	
		return true;
		}

	return false;
}

void MyCameraListener::WiiControl()
{
	if (mWiiMote.Button.B())
	{
		mWiiMote.Acceleration.X = 0;
		mWiiMote.Acceleration.Y = 0;
		mWiiMote.Acceleration.Z = 0;	 
	}
			 
	if(mWiiMote.Button.Up())
			 cameraTranslation.z = -mMoveScale;

	if(mWiiMote.Button.Down())
			 cameraTranslation.z = mMoveScale;

	if(mWiiMote.Button.Left())
			cameraTranslation.x = -mMoveScale;

	if(mWiiMote.Button.Right())
			 cameraTranslation.x = mMoveScale;

	if(mWiiMote.Button.A())
		{
			cameraTranslation.y = mWiiMote.Acceleration.Z;
			mWiiMote.Acceleration.X = 0;
			mWiiMote.Acceleration.Y = 0;
		}

	mTimeUntilNextToggle = 0.5;
}

//void MyCameraListener::on3DxAxisMoved( const ISpaceNavigator::State& state )
//{
//	if (state.hasRotation)
//	{
//		m_pCamera->getParentNode()->rotate(state.deltaRotation);	 
//	}
//	if (state.hasMovement)
//	{
//		m_pCamera->getParentNode()->translate(state.deltaTranslation, Ogre::Node::TransformSpace::TS_LOCAL); //moveRelative(state.deltaTranslation);
//    }
//}

//void MyCameraListener::on3DxButtonPressed( const ISpaceNavigator::State& state, long key_code )
//	{
//		if (key_code == 1)
//		   printf("tfgyhjkm");
//	}
//
//void MyCameraListener::on3DxButtonReleased( const ISpaceNavigator::State& state, long key_code )
//	{
//	  
//	}
